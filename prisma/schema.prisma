generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  name            String
  createdAt       DateTime         @default(now())
  password        String?
  reports         Report[]
  userInfo        UserInfo?
  userPreferences UserPreference[]
}

/// 가입 시 입력한 스펙
model UserInfo {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  schoolScore        Float?
  schoolName         String?
  major              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  certificationCount Int?     @default(0)
  experienceYears    Int?     @default(0)
  internshipCount    Int?     @default(0)
  englishScores      Int?     @default(0)
  awardsCount        Int?     @default(0)
  clubActivityCount  Int?     @default(0)
  user               User     @relation(fields: [userId], references: [id])
}

model Company {
  id              Int                 @id @default(autoincrement())
  name            String              @unique
  address         String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  companyAbility  CompanyAbility?
  companyJobs     CompanyJob[]
  interviews      Interview[]
  reports         Report[]
  resumeSamples   ResumeSample[]
}

model Report {
  id        Int      @id @default(autoincrement())
  userId    Int
  companyId Int
  jobRole   String
  createdAt DateTime @default(now())
  sections  Json
  company   Company  @relation(fields: [companyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([companyId], map: "Report_companyId_fkey")
  @@index([userId], map: "Report_userId_fkey")
}

model Interview {
  id           Int       @id @default(autoincrement())
  companyId    Int
  jobRole      String?
  hiringType   String?
  question     String
  review       String?
  process      String?
  result       String?
  date         DateTime?
  combinedText String?
  company      Company   @relation(fields: [companyId], references: [id])

  @@index([companyId], map: "Interview_companyId_fkey")
}

model ResumeSample {
  id              Int     @id @default(autoincrement())
  companyId       Int
  universityType  String
  major           String
  recruitmentTerm String
  hiringType      String
  jobRole         String
  gpa             Float
  awardsCnt       Int
  internshipCnt   Int
  clubActivityCnt Int
  englishScores   Int
  company         Company @relation(fields: [companyId], references: [id])

  @@index([companyId], map: "ResumeSample_companyId_fkey")
}
model CompanyJob {
  id        Int     @id @default(autoincrement())
  companyId Int
  jobName   String
  task      String  @db.Text
  salary    Float?
  vision    String? @db.Text
  traits    Float?
  scale     Float?
  company   Company @relation(fields: [companyId], references: [id])

  @@unique([companyId, jobName])
}

model CompanyAbility {
  id               Int     @id @default(autoincrement())
  companyId        Int     @unique
  gpa              Float?
  certificationCnt Float?
  awardsCnt        Float?
  internshipCnt    Float?
  clubActivityCnt  Float?
  englishScores    Int?
  company          Company @relation(fields: [companyId], references: [id])
}

model UserPreference {
  id        Int      @id @default(autoincrement())
  userId    Int
  salary    Float?
  jobs      Json?
  traits    Float?
  scale     Float?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "UserPreference_userId_fkey")
}
