generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  name          String
  password      String?
  createdAt     DateTime      @default(now())
  userInfo      UserInfo?
  reports       Report[]      
  userPreferences UserPreference[]
}

/// 가입 시 입력한 스펙
model UserInfo {
  id                  Int       @id @default(autoincrement())
  user                User      @relation(fields: [userId], references: [id])
  userId              Int       @unique
  schoolName          String?       
  schoolScore         Float?     
  major               String?
  englishScores       Int?      @default(0)      
  certificationCount  Int?      @default(0)
  internshipCount     Int?      @default(0)
  experienceYears     Int?      @default(0)       
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

/// 회사 규모 ENUM
enum CompanyScale {
  대기업
  중견
  중소
  스타트업
  공기업
}
model Company {
  id                 Int       @id @default(autoincrement())
  name               String    @unique      // 회사명
  industry           String?                  // 업종
  estDate            DateTime?                // 설립일
  employeeCount      Int?
  ceo                String?                  // 대표자명
  website            String?
  address            String?
  avgSalary          Float?    // 전체 평균 연봉
  entrySalary        Float?    // 신입사원 초봉
  businessSummary    String?   // 사업내용
  benefits           String?   // 복지_지원금/보험
  history            String?   // 연혁
  logoUrl            String?
  interviews         Interview[]
  resumeSamples      ResumeSample[]
  requirements       CompanyRequirement?
  reports            Report[]
  companyJobs        CompanyJob[]
  companyAbility     CompanyAbility?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Report {
  id              Int        @id @default(autoincrement())
  user            User       @relation(fields: [userId], references: [id])
  userId          Int
  company         Company    @relation(fields: [companyId], references: [id])
  companyId       Int
  jobRole         String     // 요청 시 지정한 직무
  createdAt       DateTime   @default(now())

  // AI가 생성한 리포트 각 섹션을 JSON으로 보관
  sections        Json       // {
                              //   "newYearMessage": "...",
                              //   "financialStatus": "...",
                              //   "talentProfile": "...",
                              //   "specComparison": "...",
                              //   "interviewGuide": "..."
                              // }
}

model Interview {
  id            Int      @id @default(autoincrement())
  company       Company  @relation(fields: [companyId], references: [id])
  companyId     Int
  jobRole       String?  // 직무명
  hiringType    String?  // 신입/경력
  question      String
  review        String?  // 면접후기
  process       String?  // 채용과정
  result        String?  // 면접결과
  date          DateTime?
  combinedText  String?  // ("질문+답변" 합친 텍스트)
}

model ResumeSample {
  id               Int      @id @default(autoincrement())
  company          Company  @relation(fields: [companyId], references: [id])
  companyId        Int
  universityType   String   // ex. 서울4년, 고졸 등
  major            String
  recruitmentTerm  String   // ex. "2023년 하반기"
  hiringType       String   // 신입/경력
  jobRole          String
  gpa              Float
  englishScores    Int    
  awardsCnt        Int
  internshipCnt    Int
  clubActivityCnt  Int
  // … 필요시 sample 답변(question/answer) 필드 추가
}

model CompanyRequirement {
  id                Int      @id @default(autoincrement())
  company           Company  @relation(fields: [companyId], references: [id])
  companyId         Int      @unique
  minGpa            Float?
  minEnglishScores  Json?
  minCertifications Int?
  minInternships    Int?
  // resumeSamples 에서 통계(최소, 25/50/75 백분위 등)로 집계
}

// === 회사별 직무/담당업무/연봉/인재상/특성 ===
model CompanyJob {
  id        Int      @id @default(autoincrement())
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
  jobName   String   // 직무명
  task      String   @db.Text
  salary    Float?   // 연봉
  vision    String?  @db.Text
  traits    Float?   // 워라밸/성장 등 특성 (0~1)
  scale     Float?   // 회사 규모 (0~1)

  @@unique([companyId, jobName])
}

// === 회사별 평균 스펙 통계 ===
model CompanyAbility {
  id               Int      @id @default(autoincrement())
  company          Company  @relation(fields: [companyId], references: [id])
  companyId        Int      @unique
  gpa              Float?
  certificationCnt Float?
  awardsCnt        Float?
  internshipCnt    Float?
  clubActivityCnt  Float?
  englishScores    Int?  
}

// === 유저의 검색/선호 조건 이력 ===
model UserPreference {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  salary    Float?
  jobs      Json?    // ["데이터 분석가", ...]
  traits    Float?
  scale     Float?
  createdAt DateTime @default(now())
}
